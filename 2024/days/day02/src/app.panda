require 'java' { collections }

import java.io.File
import java.nio.file.Files
import java.lang.Math

main {
    List<String> input = Files.readAllLines(new File(System.getProperty("input")).toPath())

    // -- Part 1
    mut Int safeCount = 0

    foreach (String line : input) {
        if (ReportAnalyzer.isSafe(line.split(' ').toList())) {
            safeCount++
        }
    }

    log 'Part 1: Safe ' + safeCount // 442

    // -- Part 2
    mut Int safeWithFixedCount = 0

    foreach (String line : input) {
        if (ReportAnalyzer.isSafe(line.split(' ').toList())) {
            safeWithFixedCount++
        } else if (ReportAnalyzer.isSafeWithFixes(line.split(' ').toList())) {
            safeWithFixedCount++
        }
    }

    log 'Part 2: Safe (with fixes) ' + safeWithFixedCount // 493
}

shared type ReportAnalyzer {
    shared static isSafe(List<String> values) -> Bool {
        mut nil Int previous = Java.null()
        mut nil Int progression = Java.null()

        foreach (String value : values) {
            if (value == Java.null()) {
                continue
            }

            let number = Int.parseInt(value)

            if (previous != Java.null()) {
                if (progression == Java.null()) {
                    progression = previous - number
                } else {
                    let currentProgression = previous - number

                    if ((progression * currentProgression) < 0) {
                        return false
                    }

                    progression = currentProgression
                }

                if (!(Math.abs(progression) > 0 && Math.abs(progression) < 4)) {
                    return false
                }
            }

            previous = number
        }

        return true
    }

    shared static isSafeWithFixes(List<String> values) -> Bool {
        for (mut Int index = 0; index < values.size(); index++) {
            let copy = new ArrayList(values)
            copy.set(index, Java.null())

            if (ReportAnalyzer.isSafe(copy)) {
                return true
            }
        }
        return false
    }
}